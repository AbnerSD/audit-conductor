# Generated by zerotest
from __future__ import unicode_literals
from zerotest.request import Request
from zerotest.response import Response
from zerotest.response_matcher import ResponseMatcher


matcher = ResponseMatcher(ignore_all_headers=True)
verify_ssl = False


def test_get_reset():
    request = Request(scheme='http', method='GET', headers={'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.28 Safari/537.36', 'Dnt': '1', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'en-US,en;q=0.9,eo;q=0.8', 'Cookie': 'gsScrollPos-6417=0; gsScrollPos-5300=0; gsScrollPos-2934=0; gsScrollPos-3120=0; gsScrollPos-3574=0; gsScrollPos-3508=; gsScrollPos-4736=0; gsScrollPos-3123=0; gsScrollPos-3571=', 'If-Modified-Since': 'Sun, 06 Jan 2019 03:37:46 GMT'}, host='127.0.0.1:5000', path='/reset')
    
    real = Response.from_requests_response(request.send_request(verify=verify_ssl))
    expect = Response(status=304, headers={}, body='')
    matcher.match_responses(expect, real)


def test_post_reset_audit_state():
    request = Request(scheme='http', method='POST', headers={'Connection': 'keep-alive', 'Content-Length': '2', 'Accept': '*/*', 'Origin': 'http://127.0.0.1:9000', 'X-Requested-With': 'XMLHttpRequest', 'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.28 Safari/537.36', 'Dnt': '1', 'Content-Type': 'application/json', 'Referer': 'http://127.0.0.1:9000/reset', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'en-US,en;q=0.9,eo;q=0.8', 'Cookie': 'gsScrollPos-6417=0; gsScrollPos-5300=0; gsScrollPos-2934=0; gsScrollPos-3120=0; gsScrollPos-3574=0; gsScrollPos-3508=; gsScrollPos-4736=0; gsScrollPos-3123=0; gsScrollPos-3571='}, host='127.0.0.1:5000', path='/reset-audit-state', data='{}')
    
    real = Response.from_requests_response(request.send_request(verify=verify_ssl))
    expect = Response(status=200, headers={'content-type': 'text/html; charset=utf-8'}, body='')
    matcher.match_responses(expect, real)


def test_post_get_audit_state():
    request = Request(scheme='http', method='POST', headers={'Connection': 'keep-alive', 'Content-Length': '0', 'Accept': '*/*', 'Origin': 'http://127.0.0.1:9000', 'X-Requested-With': 'XMLHttpRequest', 'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.28 Safari/537.36', 'Dnt': '1', 'Content-Type': 'application/json', 'Referer': 'http://127.0.0.1:9000/', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'en-US,en;q=0.9,eo;q=0.8', 'Cookie': 'gsScrollPos-6417=0; gsScrollPos-5300=0; gsScrollPos-2934=0; gsScrollPos-3120=0; gsScrollPos-3574=0; gsScrollPos-3508=; gsScrollPos-4736=0; gsScrollPos-3123=0; gsScrollPos-3571='}, host='127.0.0.1:5000', path='/get-audit-state')
    
    real = Response.from_requests_response(request.send_request(verify=verify_ssl))
    expect = Response(status=200, headers={'content-type': 'application/json'}, body='{"all_contests":null,"all_interpretations":[],"audit_name":null,"audit_type_name":null,"ballot_ids":null,"ballot_manifest":null,"cvr_hash":null,"main_contest_in_progress":null,"reported_results":null,"seed":null,"total_number_of_ballots":null}\n')
    matcher.match_responses(expect, real)


def test_get_get_audit_types():
    request = Request(scheme='http', method='GET', headers={'Connection': 'keep-alive', 'Accept': '*/*', 'Dnt': '1', 'X-Requested-With': 'XMLHttpRequest', 'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.28 Safari/537.36', 'Content-Type': 'application/json', 'Referer': 'http://127.0.0.1:9000/', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'en-US,en;q=0.9,eo;q=0.8', 'Cookie': 'gsScrollPos-6417=0; gsScrollPos-5300=0; gsScrollPos-2934=0; gsScrollPos-3120=0; gsScrollPos-3574=0; gsScrollPos-3508=; gsScrollPos-4736=0; gsScrollPos-3123=0; gsScrollPos-3571='}, host='127.0.0.1:5000', path='/get-audit-types')
    
    real = Response.from_requests_response(request.send_request(verify=verify_ssl))
    expect = Response(status=200, headers={'content-type': 'application/json'}, body='{"types":["ballot_polling","ballot_comparison"]}\n')
    matcher.match_responses(expect, real)


